# ============================*
 # ** Copyright UCAR (c) 2020
 # ** University Corporation for Atmospheric Research (UCAR)
 # ** National Center for Atmospheric Research (NCAR)
 # ** Research Applications Lab (RAL)
 # ** P.O.Box 3000, Boulder, Colorado, 80307-3000, USA
 # ============================*
 
 
 
import os
import sys
import logging
import calendar
import math
import numpy as np
from netCDF4 import Dataset

# nautical miles to kilometers conversion factor
nm_to_km = 1.852

def format_valid_time(valid_time):
    """
    Format valid time.
    """
    year = valid_time // 1000000
    month = valid_time // 10000 - 100 * year
    day = valid_time // 100 - 10000 * year - 100 * month
    hour = valid_time - 1000000 * year - 10000 * month - 100 * day
    month_name = calendar.month_name[month]
    valid_time_str = '%d %s %2.2d %2.2d:00Z' % (year, month_name, day, hour)
    return valid_time_str

def read_tcrmw(filename):
    """
    Read pressure level variables from
    netcdf file generated by the TCRMW tool.
    """

    try:
        file_id = Dataset(filename, 'r')
        logging.info('reading ' + filename)
    except IOError:
        logging.error('failed to open ' + filename)
        sys.exit()

    valid_time = file_id.variables['valid_time'][:]
    # read grid variables
    lat_grid = file_id.variables['lat'][:]
    lon_grid = file_id.variables['lon'][:]
    range_grid = file_id.variables['range'][:]
    azimuth_grid = file_id.variables['azimuth'][:]
    pressure_grid = file_id.variables['pressure'][:]

    logging.debug('lat_grid.shape=' + str(lat_grid.shape))
    logging.debug('lon_grid.shape=' + str(lon_grid.shape))

    # read track center and cyclone radius
    track_data = {}
    track_data['Lat'] = file_id.variables['Lat'][:]
    track_data['Lon'] = file_id.variables['Lon'][:]
    track_data['RMW'] = file_id.variables['RMW'][:] * nm_to_km
    track_data['TrackLines'] = file_id.variables['TrackLines'][:]

    # possible U, V variable names
    u_vars = set(['U', 'UGRD'])
    v_vars = set(['V', 'VGRD'])

    grid_vars = set(['valid_time', 'lat', 'lon',
        'range', 'azimuth', 'pressure'])
    track_vars = set(['Lat', 'Lon', 'RMW', 'TrackLines'])
    wind_data = {}
    scalar_data = {}

    # read all variables and group as either wind or scalar
    for var in file_id.variables:
        logging.info(var)
        if var in u_vars:
            wind_data['U'] = file_id.variables[var][:]
        if var in v_vars:
            wind_data['V'] = file_id.variables[var][:]
        if var not in grid_vars.union(track_vars).union(u_vars).union(v_vars):
            scalar_data[var] = file_id.variables[var][:]

    file_id.close()

    return valid_time, lat_grid, lon_grid, \
        range_grid, azimuth_grid, pressure_grid, \
        track_data, wind_data, scalar_data

def read_tcrmw_levels(filename, levels=['L0']):
    """
    Read level-labeled variables from
    netcdf file generated by the TCRMW tool.
    """

    try:
        file_id = Dataset(filename, 'r')
        logging.info('reading ' + filename)
    except IOError:
        logging.error('failed to open ' + filename)
        sys.exit()

    valid_time = file_id.variables['valid_time'][:]
    lat_grid = file_id.variables['lat'][:]
    lon_grid = file_id.variables['lon'][:]

    logging.debug('lat_grid.shape=' + str(lat_grid.shape))
    logging.debug('lon_grid.shape=' + str(lon_grid.shape))

    grid_vars = set(['lat', 'lon', 'range', 'azimuth'])
    wind_data = {}
    scalar_data = {}

    for level in levels:
        u_vars = set(['U_' + level, 'UGRD_' + level])
        v_vars = set(['V_' + level, 'VGRD_' + level])

        for var in file_id.variables:
            logging.info(var)
            if var in u_vars:
                wind_data['U'] = file_id.variables[var][:]
            if var in v_vars:
                wind_data['V'] = file_id.variables[var][:]
            if var not in grid_vars.union(u_vars).union(v_vars):
                scalar_data[var] = file_id.variables[var][:]

    file_id.close()

    return valid_time, lat_grid, lon_grid, wind_data, scalar_data
   
   
def radial_tangential_winds(
    valid_time, range_grid, azimuth_grid, pressure_grid, wind_data):
    """
    Compute radial and tangential components from zonal and meridional components.
    """
    n_t = len(valid_time)
    n_r = len(range_grid)
    n_a = len(azimuth_grid)
    n_p = len(pressure_grid)
    logging.info('(n_t, n_r, n_a, n_p)=' + str((n_t, n_r, n_a, n_p)))

    # e_r = cos(theta) e_x + sin(theta) e_y
    # e_theta = - sin(theta) e_x + cos(theta) e_y
    theta = np.empty((n_r, n_a, n_p, n_t), dtype=np.float32)
    # theta = math.pi / 2 - (math.pi / 180) * azimuth_grid
    for i in range(n_r):
        for k in range(n_p):
            for t in range(n_t):
                # theta[i, :, k, t] = math.pi / 2 - (math.pi / 180) * azimuth_grid[:]
                theta[i, :, k, t] = (math.pi / 180) * azimuth_grid[:] + math.pi / 2
    mask = np.greater(theta, 2 * math.pi)
    theta[mask] = theta[mask] - 2 * math.pi

    wind_radial = np.cos(theta) * wind_data['U'] + np.sin(theta) * wind_data['V']
    wind_tangential = - np.sin(theta) * wind_data['U'] + np.cos(theta) * wind_data['V']
    wind_data['radial'] = wind_radial
    wind_data['tangential'] = wind_tangential   



if __name__ == '__main__':
    print(format_valid_time(2019050123))
