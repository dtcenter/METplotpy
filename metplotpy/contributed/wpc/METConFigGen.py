#!/usr/bin/python

################################################################################################
#THIS SCRIPT CONTAINS A SERIES OF FUNCTIONS THAT GENERATE MODEL EVALUATION TOOLS (MET)
#CONFIGURATION FILES. NOTE THAT NOT ALL SETTINGS ARE DYNAMIC WITHIN THE CONFIG FILES, 
#MEANING THAT THESE FUNCTIONS MAY HAVE TO BE EDITTED, RATHER THAN THE VARIABLES IN THE MASTER 
#FILE. THIS CODE IS A WORK-IN-PROGRESS. 20161202. MJE.
#
#UPDATE: ADD MORE VARIABLES TO CONFIG FILE. MJE. 20170223.
#UPDATE: CONFIGURED TO METV6.0. MJE. 20170419-20170504.
#UPDATE: CONFIGURED TO METV8.0. MJE. 20190401.
#UPDATE: CONFIGURED TO METV8.1. MJE. 20190605.
#UPDATE: Update from Python2 to Python3. MJE. 20210303.
################################################################################################


import numpy as np
import subprocess
import os

####################################################################################
#NOTE THAT USER HAS SOME CONTROL OVER THE CONFIG FILE GENERATION FROM THE FUNCTION 
#INPUTS, WITH ADDITIONAL CONTROL IN THE DEFINED VARIABLE SECTION AT THE START
#OF THIS FUNCTINON. MJE. 20170629.
############INPUT FILES FOR set_GridStatConfig CONFIG FILE##########################
#filedir       - Directory where CONFIG file is to be saved
#filename      - Prefix for CONFIG file name
#mod_cat       - Model Name
#mod_lev       - Model level
#obs_cat       - Observation name
#obs_lev       - Observation level
#mod_name      - Model file name
#neigh_filter  - Minimum size to keep object (in grid points) 
#grid_delta    - grid resolution increment for interpolation (degrees lat/lon)
####################OUTPUT FILES FOR set_GridStatConfig#############################
#config_name   - Configuration file name generated by function
####################################################################################

def set_GridStatConfig(filedir,filename,mod_cat,mod_lev,obs_cat,obs_lev,mod_name,neigh_filter,grid_delta):

##################COMMENT OUT WHEN IN FUNCTION MODE#################################
#    filedir        = '/export/hpc-lw-dtbdev5/merickson/METv6.0/' 
#    filename       = 'FFGonly'
#    mod_cat        = 'ERO_MRGL'
#    mod_lev        = 'Surface'
#    obs_cat        = 'ST4gFFG'
#    obs_lev        = 'Surface'
#    mod_name   = '/export/hpc-lw-dtbdev5/wpc_cpgffh/gribs//ERO_verif/ERO_verif_FFAIR2017/ERO_MRGL_s2017062012_e2017062112_vhr12.nc'
#    neigh_filter   = 40
#    grid_delta     = 0.1              
####################################################################################
# OLD LINE 173 + '   nbrhd      = '+nei_def['bol'][0]+';\n' \
################USER DEFINED VARIABLES FOR ADDED FLEXABILITY#########################
    obs_def = np.zeros(1, dtype = [('name', '|S20'),('level', '|S20'),('thres', '|S20')])
    mod_def = np.zeros(1, dtype = [('name', '|S20'),('level', '|S20'),('thres', '|S20')])                    
    fil_def = np.zeros(1, dtype = [('name', '|S20'),('level', '|S20'),('thres', '|S20'),('file', '|S200')])  
    nei_def = np.zeros(1, dtype = [('bol', '|S20'), ('field', '|S20'),('thres', '|S20'),('shape', '|S20'),('method', '|S20'),('width', '|S20')])  
      
    obs_def['name']  = obs_cat
    obs_def['level'] = obs_lev
    obs_def['thres'] = '1.0'
    
    mod_def['name']  = mod_cat
    mod_def['level'] = mod_lev
    mod_def['thres'] = '1.0'
    
    fil_def['name']  = mod_cat
    fil_def['level'] = mod_lev
    fil_def['thres'] = '1.0'
    fil_def['file']  = mod_name

    nei_def['bol']    = 'TRUE'
    nei_def['field']  = 'OBS'
    nei_def['thres']  = '1.0'
    nei_def['shape']  = 'CIRCLE'
    nei_def['method'] = 'MAX'
####################################################################################

    #Calculate MET filter radius in degres from user specified grid resolution and filter value in km
    nei_def['width'] = int(np.ceil(neigh_filter/(grid_delta*111)))*2
    if int(nei_def['width'][0]) % 2 == 0:
        nei_def['width'][0] = str(int(nei_def['width'][0]) - 1)
    
    #Create the content for the CONFIG file
    data2 = 'model = "WRF"; \n' \
        + 'desc = "'+obs_def['name'][0]+'"; \n' \
        + 'obtype = "ANALYS"; \n' \
        + 'regrid = {\n' \
        + '    to_grid    = NONE;\n' \
        + '    vld_thresh = 0.5;\n' \
        + '    method     = NEAREST;\n' \
        + '    width      = 1;\n\n' \
        + 'cat_thresh  = [ NA ];\n' \
        + 'cnt_thresh  = [ NA ];\n' \
        + 'cnt_logic   = UNION;\n' \
        + 'wind_thresh = [ NA ];\n' \
        + 'wind_logic  = UNION;\n' \
        + '}\n\n' \
        + 'fcst = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+mod_def['name'][0]+'";\n' \
        + '      level = [ "'+mod_def['level'][0]+'" ];\n' \
        + '      cat_thresh = [ >='+mod_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'obs = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+obs_def['name'][0]+'";\n' \
        + '      level = [ "'+obs_def['level'][0]+'" ];\n' \
        + '      cat_thresh = [ >='+obs_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'climo_mean = {\n' \
        + '   file_name = [];\n' \
        + '   field     = [];\n' \
        + '   regrid = {\n' \
        + '      method     = NEAREST;\n' \
        + '      width      = 1;\n' \
        + '      vld_thresh = 0.5;\n' \
        + '   }\n' \
        + '   time_interp_method = DW_MEAN;\n' \
        + '   match_day          = FALSE;\n' \
        + '   time_step          = 21600;\n' \
        + '}\n\n' \
        + 'mask = {\n' \
        + '   grid = [ "FULL"];\n' \
        + '   poly = [ "'+fil_def['file'][0]+' {name = \\"'+fil_def['name'][0]+'\\"; level = \\"'+fil_def['level'][0]+'\\";}>='+fil_def['thres'][0]+'"];\n' \
        + '}\n\n' \
        + 'ci_alpha  = [ 0.05 ];\n' \
        + 'boot = {\n' \
        + '   interval = PCTILE;\n' \
        + '   rep_prop = 1.0;\n' \
        + '   n_rep    = 0;\n' \
        + '   rng      = "mt19937";\n' \
        + '   seed     = "";\n' \
        + '}\n\n' \
        + 'interp = {\n' \
        + '   field      = '+nei_def['field'][0]+';\n' \
        + '   vld_thresh = '+nei_def['thres'][0]+';\n' \
        + '   shape      = '+nei_def['shape'][0]+';\n' \
        + '   type = [\n' \
        + '      {\n' \
        + '         method = '+nei_def['method'][0]+';\n' \
        + '         width  = '+nei_def['width'][0]+';\n' \
        + '      }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'nbrhd = {\n' \
        + '   width      = [ 1 ];\n' \
        + '   cov_thresh = [ >=0.5 ];\n' \
        + '   vld_thresh = 1.0;\n' \
        + '}\n\n' \
        + 'output_flag = {\n' \
        + '   fho    = STAT;\n' \
        + '   ctc    = STAT;\n' \
        + '   cts    = STAT;\n' \
        + '   mctc   = STAT;\n' \
        + '   mcts   = STAT;\n' \
        + '   cnt    = STAT;\n' \
        + '   sl1l2  = STAT;\n' \
        + '   sal1l2 = STAT;\n' \
        + '   vl1l2  = STAT;\n' \
        + '   val1l2 = STAT;\n' \
        + '   pct    = STAT;\n' \
        + '   pstd   = STAT;\n' \
        + '   pjc    = STAT;\n' \
        + '   prc    = STAT;\n' \
        + '   nbrctc = STAT;\n' \
        + '   nbrcts = STAT;\n' \
        + '   nbrcnt = STAT;\n' \
        + '}\n\n' \
        + 'nc_pairs_flag   = {\n' \
        + '   latlon     = FALSE;\n' \
        + '   raw        = TRUE;\n' \
        + '   diff       = FALSE;\n' \
        + '   climo      = FALSE;\n' \
        + '   weight     = FALSE;\n' \
        + '   nbrhd      = FALSE;\n' \
        + '   apply_mask = FALSE;\n' \
        + '}\n\n' \
        + 'grid_weight_flag = NONE;\n' \
        + 'rank_corr_flag   = FALSE;\n' \
        + 'tmp_dir          = "/tmp";\n' \
        + 'output_prefix    = "'+obs_def['name'][0]+'_'+mod_name[mod_name.find(mod_cat):mod_name.find('vhr')+5]+'";\n' \
        + 'version          = "V8.1";\n'

    config_name = filedir+'/grid_stat_'+filename+'_OBS'+obs_def['name'][0]+obs_def['level'][0]+obs_def['thres'][0]+'_MOD'+mod_def['name'][0]+mod_def['level'][0]+mod_def['thres'][0]
    f=open(config_name, "w")
    f.write(data2)
    f.close()
    
    return(config_name)

####################################################################################
#SIMILAR TO GridStatConfig, BUT FOR PROBABILSITIC VERIFICATION. DUE TO A LACK OF
#FLEXIBILITY IN THIS FUNCTION, THERE ARE TWO VERSIONS FOR NOW. FUTURE WORK MAY
#COMBINE THEIR UTILITY. FOR NOW, USE THIS FUNCTION WHEN DOING ANYTHING PROBABILISTIC.
#NOTE THAT USER HAS SOME CONTROL OVER THE CONFIG FILE GENERATION FROM THE FUNCTION 
#INPUTS, WITH ADDITIONAL CONTROL IN THE DEFINED VARIABLE SECTION AT THE START
#OF THIS FUNCTINON. MJE. 20170817
#
#UPDATE: Raised error for multiple observational probability thresholds. MET does 
#support this, but it will need to be built into this function. MJE 20200527.
#
############INPUT FILES FOR set_GridStatConfigProb CONFIG FILE##########################
#filedir       - Directory where CONFIG file is to be saved
#filename      - Prefix for CONFIG file name
#mod_cat       - Model Name
#mod_lev       - Model level
#mod_thr       - Model threshold(s)
#mod_prob      - Model probability ('TRUE' or 'FALSE')
#obs_cat       - Observation name
#obs_lev       - Observation level
#obs_thr       - Observation thresholds()
#mod_name      - Model file name
#neigh_filter  - Minimum size to keep object (in grid points) 
#grid_delta    - grid resolution increment for interpolation (degrees lat/lon)
####################OUTPUT FILES FOR set_GridStatConfig#############################
#config_name   - Configuration file name generated by function
####################################################################################

def set_GridStatConfigProb(filedir,filename,mod_cat,mod_lev,mod_thr,mod_prob,obs_cat,obs_lev,obs_thr,mod_name,neigh_filter,grid_delta):

##################COMMENT OUT WHEN IN FUNCTION MODE#################################
#    filedir        = '/export/hpc-lw-dtbdev5/merickson/METv6.0/' 
#    filename       = 'FFGonly'
#    mod_cat        = 'ERO_MRGL'
#    mod_lev        = 'Surface'
#    mod_thr        = '>=0.0, >=0.05, >=0.1, >=0.2, >=0.5, >=1.0'
#    mod_prob       = 'TRUE'
#    obs_cat        = 'ST4gFFG'
#    obs_lev        = 'Surface'
#    obs_thr        = '>0.0'
#    mod_name       = '/export/hpc-lw-dtbdev5/wpc_cpgffh/gribs//ERO_verif/ERO_verif_FFAIR2017/ERO_MRGL_s2017062012_e2017062112_vhr12.nc'
#    neigh_filter   = 40
#    grid_delta     = 0.1              
####################################################################################
# OLD LINE 173 + '   nbrhd      = '+nei_def['bol'][0]+';\n' \
################USER DEFINED VARIABLES FOR ADDED FLEXABILITY#########################

    #This function only works with one observational threshold, but multiple forecast threshold
    if ',' in obs_thr and mod_prob == 'TRUE':
        raise ValueError('This function Must Have Only One Observational Probability.')

    obs_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50')])
    mod_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50'),('prob', '|S50')])                    
    fil_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50'),('file', '|S200')])  
    nei_def = np.zeros(1, dtype = [('bol', '|S50'), ('field', '|S50'),('thres', '|S50'),('shape', '|S50'),('method', '|S50'),('width', '|S50')])  
      
    obs_def['name']  = obs_cat
    obs_def['level'] = obs_lev
    obs_def['thres'] = obs_thr
    
    mod_def['name']  = mod_cat
    mod_def['level'] = mod_lev
    mod_def['thres'] = mod_thr
    mod_def['prob']  = mod_prob
    
    fil_def['name']  = mod_cat
    fil_def['level'] = mod_lev
    fil_def['thres'] = '1.0'
    fil_def['file']  = mod_name

    nei_def['bol']    = 'TRUE'
    nei_def['field']  = 'OBS'
    nei_def['thres']  = '1.0'
    nei_def['shape']  = 'CIRCLE'
    nei_def['method'] = 'MAX'
####################################################################################

    #Calculate MET filter radius in degres from user specified grid resolution and filter value in km
    nei_def['width'] = int(np.ceil(neigh_filter/(grid_delta*111)))*2
    if int(nei_def['width'][0]) % 2 == 0:
        nei_def['width'][0] = str(int(nei_def['width'][0]) - 1)
    
    #Create the content for the CONFIG file
    data2 = 'model = "WRF"; \n' \
        + 'desc = "'+obs_def['name'][0]+'"; \n' \
        + 'obtype = "ANALYS"; \n' \
        + 'regrid = {\n' \
        + '    to_grid    = NONE;\n' \
        + '    vld_thresh = 0.5;\n' \
        + '    method     = NEAREST;\n' \
        + '    width      = 1;\n\n' \
        + 'cat_thresh  = [ NA ];\n' \
        + 'cnt_thresh  = [ NA ];\n' \
        + 'cnt_logic   = UNION;\n' \
        + 'wind_thresh = [ NA ];\n' \
        + 'wind_logic  = UNION;\n' \
        + '}\n\n' \
        + 'fcst = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+mod_def['name'][0]+'";\n' \
        + '      level = [ "'+mod_def['level'][0]+'" ];\n' \
        + '      prob  = '+mod_def['prob'][0]+';\n' \
        + '      cat_thresh = [ '+mod_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'obs = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+obs_def['name'][0]+'";\n' \
        + '      level = [ "'+obs_def['level'][0]+'" ];\n' \
        + '      cat_thresh = [ '+obs_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'climo_mean = {\n' \
        + '   file_name = [];\n' \
        + '   field     = [];\n' \
        + '   regrid = {\n' \
        + '      method     = NEAREST;\n' \
        + '      width      = 1;\n' \
        + '      vld_thresh = 0.5;\n' \
        + '   }\n' \
        + '   time_interp_method = DW_MEAN;\n' \
        + '   match_day          = FALSE;\n' \
        + '   time_step          = 21600;\n' \
        + '}\n\n' \
        + 'mask = {\n' \
        + '   grid = [ "FULL"];\n' \
        + '   poly = [];\n' \
        + '}\n\n' \
        + 'ci_alpha  = [ 0.05 ];\n' \
        + 'boot = {\n' \
        + '   interval = PCTILE;\n' \
        + '   rep_prop = 1.0;\n' \
        + '   n_rep    = 0;\n' \
        + '   rng      = "mt19937";\n' \
        + '   seed     = "";\n' \
        + '}\n\n' \
        + 'interp = {\n' \
        + '   field      = '+nei_def['field'][0]+';\n' \
        + '   vld_thresh = '+nei_def['thres'][0]+';\n' \
        + '   shape      = '+nei_def['shape'][0]+';\n' \
        + '   type = [\n' \
        + '      {\n' \
        + '         method = '+nei_def['method'][0]+';\n' \
        + '         width  = '+nei_def['width'][0]+';\n' \
        + '      }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'nbrhd = {\n' \
        + '   width      = [ 1 ];\n' \
        + '   cov_thresh = [ >=0.5 ];\n' \
        + '   vld_thresh = 1.0;\n' \
        + '}\n\n' \
        + 'output_flag = {\n' \
        + '   fho    = STAT;\n' \
        + '   ctc    = STAT;\n' \
        + '   cts    = STAT;\n' \
        + '   mctc   = STAT;\n' \
        + '   mcts   = STAT;\n' \
        + '   cnt    = STAT;\n' \
        + '   sl1l2  = STAT;\n' \
        + '   sal1l2 = STAT;\n' \
        + '   vl1l2  = STAT;\n' \
        + '   val1l2 = STAT;\n' \
        + '   pct    = STAT;\n' \
        + '   pstd   = STAT;\n' \
        + '   pjc    = STAT;\n' \
        + '   prc    = STAT;\n' \
        + '   nbrctc = STAT;\n' \
        + '   nbrcts = STAT;\n' \
        + '   nbrcnt = STAT;\n' \
        + '}\n\n' \
        + 'nc_pairs_flag   = {\n' \
        + '   latlon     = FALSE;\n' \
        + '   raw        = TRUE;\n' \
        + '   diff       = FALSE;\n' \
        + '   climo      = FALSE;\n' \
        + '   weight     = FALSE;\n' \
        + '   nbrhd      = FALSE;\n' \
        + '   apply_mask = FALSE;\n' \
        + '}\n\n' \
        + 'grid_weight_flag = NONE;\n' \
        + 'rank_corr_flag   = FALSE;\n' \
        + 'tmp_dir          = "/tmp";\n' \
        + 'output_prefix    = "'+obs_def['name'][0]+'_'+mod_name[mod_name.find(mod_cat):mod_name.find('vhr')+5]+'";\n' \
        + 'version          = "V8.1";\n'

    config_name = filedir+'/grid_stat_'+filename+'_OBS'+obs_def['name'][0]+obs_def['level'][0]+'_MOD'+mod_def['name'][0]+mod_def['level'][0]
    f=open(config_name, "w")
    f.write(data2)
    f.close()
    
    return(config_name)



####################################################################################
#SIMILAR TO GridStatConfigProb, BUT FOR PROBABILSITIC VERIFICATION, AND SPECIFIES 
#A RADIUS AROUND NGRHD DICTIONARY BUT USES NO NEIGHBORHOOD METHOD FOR INTERP 
#DICTIONARY (ORIGINAL CODE IS THE OPPOSITE). THE SOLE PURPOSE OF THIS CODE IS TO 
#COMPUTE FSS WITH A NEIGHBORHOOD OF 40 KM FOR FFAIR 2017 PAPER RESULTS. MJE. 20190724.
############INPUT FILES FOR set_GridStatConfigProb_ONEOFF CONFIG FILE##########################
#filedir       - Directory where CONFIG file is to be saved
#filename      - Prefix for CONFIG file name
#mod_cat       - Model Name
#mod_lev       - Model level
#mod_thr       - Model threshold(s)
#mod_prob      - Model probability ('TRUE' or 'FALSE')
#obs_cat       - Observation name
#obs_lev       - Observation level
#obs_thr       - Observation thresholds()
#mod_name      - Model file name
#neigh_filter  - Minimum size to keep object (in grid points) 
#grid_delta    - grid resolution increment for interpolation (degrees lat/lon)
####################OUTPUT FILES FOR set_GridStatConfigProb_ONEOFF#############################
#config_name   - Configuration file name generated by function
####################################################################################

def set_GridStatConfigProb_ONEOFF(filedir,filename,mod_cat,mod_lev,mod_thr,mod_prob,obs_cat,obs_lev,obs_thr,mod_name,neigh_filter,grid_delta):

##################COMMENT OUT WHEN IN FUNCTION MODE#################################
#    filedir        = '/export/hpc-lw-dtbdev5/merickson/METv6.0/' 
#    filename       = 'FFGonly'
#    mod_cat        = 'ERO_MRGL'
#    mod_lev        = 'Surface'
#    mod_thr        = '>=0.0, >=0.05, >=0.1, >=0.2, >=0.5, >=1.0'
#    mod_prob       = 'TRUE'
#    obs_cat        = 'ST4gFFG'
#    obs_lev        = 'Surface'
#    obs_thr        = '>0.0'
#    mod_name       = '/export/hpc-lw-dtbdev5/wpc_cpgffh/gribs//ERO_verif/ERO_verif_FFAIR2017/ERO_MRGL_s2017062012_e2017062112_vhr12.nc'
#    neigh_filter   = 40
#    grid_delta     = 0.1              
####################################################################################
# OLD LINE 173 + '   nbrhd      = '+nei_def['bol'][0]+';\n' \
################USER DEFINED VARIABLES FOR ADDED FLEXABILITY#########################
    obs_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50')])
    mod_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50'),('prob', '|S50')])                    
    fil_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50'),('file', '|S200')])  
    nei_def = np.zeros(1, dtype = [('bol', '|S50'), ('field', '|S50'),('thres', '|S50'),('shape', '|S50'),('method', '|S50'),('width', '|S50')])  
      
    obs_def['name']  = obs_cat
    obs_def['level'] = obs_lev
    obs_def['thres'] = obs_thr
    
    mod_def['name']  = mod_cat
    mod_def['level'] = mod_lev
    mod_def['thres'] = mod_thr
    mod_def['prob']  = mod_prob
    
    fil_def['name']  = mod_cat
    fil_def['level'] = mod_lev
    fil_def['thres'] = '1.0'
    fil_def['file']  = mod_name

    nei_def['bol']    = 'TRUE'
    nei_def['field']  = 'OBS'
    nei_def['thres']  = '1.0'
    nei_def['shape']  = 'CIRCLE'
    nei_def['method'] = 'MAX'
####################################################################################

    #Calculate MET filter radius in degres from user specified grid resolution and filter value in km
    nei_def['width'] = int(np.ceil(neigh_filter/(grid_delta*111)))*2
    if int(nei_def['width'][0]) % 2 == 0:
        nei_def['width'][0] = str(int(nei_def['width'][0]) - 1)
    
    #Create the content for the CONFIG file
    data2 = 'model = "WRF"; \n' \
        + 'desc = "'+obs_def['name'][0]+'"; \n' \
        + 'obtype = "ANALYS"; \n' \
        + 'regrid = {\n' \
        + '    to_grid    = NONE;\n' \
        + '    vld_thresh = 0.5;\n' \
        + '    method     = NEAREST;\n' \
        + '    width      = 1;\n\n' \
        + 'cat_thresh  = [ NA ];\n' \
        + 'cnt_thresh  = [ NA ];\n' \
        + 'cnt_logic   = UNION;\n' \
        + 'wind_thresh = [ NA ];\n' \
        + 'wind_logic  = UNION;\n' \
        + '}\n\n' \
        + 'fcst = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+mod_def['name'][0]+'";\n' \
        + '      level = [ "'+mod_def['level'][0]+'" ];\n' \
        + '      prob  = '+mod_def['prob'][0]+';\n' \
        + '      cat_thresh = [ '+mod_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'obs = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+obs_def['name'][0]+'";\n' \
        + '      level = [ "'+obs_def['level'][0]+'" ];\n' \
        + '      cat_thresh = [ '+obs_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'climo_mean = {\n' \
        + '   file_name = [];\n' \
        + '   field     = [];\n' \
        + '   regrid = {\n' \
        + '      method     = NEAREST;\n' \
        + '      width      = 1;\n' \
        + '      vld_thresh = 0.5;\n' \
        + '   }\n' \
        + '   time_interp_method = DW_MEAN;\n' \
        + '   match_day          = FALSE;\n' \
        + '   time_step          = 21600;\n' \
        + '}\n\n' \
        + 'mask = {\n' \
        + '   grid = [""];\n' \
        + '   poly = ["/opt/MET/METPlus4_0/share/met/poly/CONUS.poly"];\n' \
        + '}\n\n' \
        + 'ci_alpha  = [ 0.05 ];\n' \
        + 'boot = {\n' \
        + '   interval = PCTILE;\n' \
        + '   rep_prop = 1.0;\n' \
        + '   n_rep    = 0;\n' \
        + '   rng      = "mt19937";\n' \
        + '   seed     = "";\n' \
        + '}\n\n' \
        + 'interp = {\n' \
        + '   field      = '+nei_def['field'][0]+';\n' \
        + '   vld_thresh = '+nei_def['thres'][0]+';\n' \
        + '   shape      = '+nei_def['shape'][0]+';\n' \
        + '   type = [\n' \
        + '      {\n' \
        + '         method = NEAREST;\n' \
        + '         width  = 1;\n' \
        + '      }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'nbrhd = {\n' \
        + '   width      = [ '+nei_def['width'][0]+' ];\n' \
        + '   cov_thresh = [ >=0.5 ];\n' \
        + '   vld_thresh = 1.0;\n' \
        + '}\n\n' \
        + 'output_flag = {\n' \
        + '   fho    = STAT;\n' \
        + '   ctc    = STAT;\n' \
        + '   cts    = STAT;\n' \
        + '   mctc   = STAT;\n' \
        + '   mcts   = STAT;\n' \
        + '   cnt    = STAT;\n' \
        + '   sl1l2  = STAT;\n' \
        + '   sal1l2 = STAT;\n' \
        + '   vl1l2  = STAT;\n' \
        + '   val1l2 = STAT;\n' \
        + '   pct    = STAT;\n' \
        + '   pstd   = STAT;\n' \
        + '   pjc    = STAT;\n' \
        + '   prc    = STAT;\n' \
        + '   nbrctc = STAT;\n' \
        + '   nbrcts = STAT;\n' \
        + '   nbrcnt = STAT;\n' \
        + '}\n\n' \
        + 'nc_pairs_flag   = {\n' \
        + '   latlon     = FALSE;\n' \
        + '   raw        = TRUE;\n' \
        + '   diff       = FALSE;\n' \
        + '   climo      = FALSE;\n' \
        + '   weight     = FALSE;\n' \
        + '   nbrhd      = FALSE;\n' \
        + '   apply_mask = TRUE;\n' \
        + '}\n\n' \
        + 'grid_weight_flag = NONE;\n' \
        + 'rank_corr_flag   = FALSE;\n' \
        + 'tmp_dir          = "/tmp";\n' \
        + 'output_prefix    = "'+obs_def['name'][0]+'_'+mod_name[mod_name.find(mod_cat):mod_name.find('vhr')+5]+'";\n' \
        + 'version          = "V8.1";\n'

    config_name = filedir+'/grid_stat_'+filename+'_OBS'+obs_def['name'][0]+obs_def['level'][0]+'_MOD'+mod_def['name'][0]+mod_def['level'][0]
    f=open(config_name, "w")
    f.write(data2)
    f.close()
    
    return(config_name)
    
####################################################################################
#SIMILAR TO GridStatConfig, BUT FOR PROBABILSITIC VERIFICATION. DUE TO A LACK OF
#FLEXIBILITY IN THIS FUNCTION, THERE ARE TWO VERSIONS FOR NOW. FUTURE WORK MAY
#COMBINE THEIR UTILITY. FOR NOW, USE THIS FUNCTION WHEN DOING ANYTHING PROBABILISTIC.
#NOTE THAT USER HAS SOME CONTROL OVER THE CONFIG FILE GENERATION FROM THE FUNCTION 
#INPUTS, WITH ADDITIONAL CONTROL IN THE DEFINED VARIABLE SECTION AT THE START
#OF THIS FUNCTINON. MJE. 20170817
############INPUT FILES FOR set_GridStatConfigProb_OLD CONFIG FILE##################
#filedir       - Directory where CONFIG file is to be saved
#filename      - Prefix for CONFIG file name
#mod_cat       - Model Name
#mod_lev       - Model level
#mod_thr       - Model threshold(s)
#mod_prob      - Model probability ('TRUE' or 'FALSE')
#obs_cat       - Observation name
#obs_lev       - Observation level
#obs_thr       - Observation thresholds()
#mod_name      - Model file name
#neigh_filter  - Minimum size to keep object (in grid points) 
#grid_delta    - grid resolution increment for interpolation (degrees lat/lon)
####################OUTPUT FILES FOR set_GridStatConfigProb_OLD#####################
#config_name   - Configuration file name generated by function
####################################################################################

def set_GridStatConfigProb_OLD(filedir,filename,mod_cat,mod_lev,mod_thr,mod_prob,obs_cat,obs_lev,obs_thr,mod_name,neigh_filter,grid_delta):

##################COMMENT OUT WHEN IN FUNCTION MODE#################################
#    filedir        = '/export/hpc-lw-dtbdev5/merickson/METv6.0/' 
#    filename       = 'FFGonly'
#    mod_cat        = 'ERO_MRGL'
#    mod_lev        = 'Surface'
#    mod_thr        = '>=0.0, >=0.05, >=0.1, >=0.2, >=0.5, >=1.0'
#    mod_prob       = 'TRUE'
#    obs_cat        = 'ST4gFFG'
#    obs_lev        = 'Surface'
#    obs_thr        = '>0.0'
#    mod_name       = '/export/hpc-lw-dtbdev5/wpc_cpgffh/gribs//ERO_verif/ERO_verif_FFAIR2017/ERO_MRGL_s2017062012_e2017062112_vhr12.nc'
#    neigh_filter   = 40
#    grid_delta     = 0.1              
####################################################################################
# OLD LINE 173 + '   nbrhd      = '+nei_def['bol'][0]+';\n' \
################USER DEFINED VARIABLES FOR ADDED FLEXABILITY#########################
    obs_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50')])
    mod_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50'),('prob', '|S50')])                    
    fil_def = np.zeros(1, dtype = [('name', '|S50'),('level', '|S50'),('thres', '|S50'),('file', '|S200')])  
    nei_def = np.zeros(1, dtype = [('bol', '|S50'), ('field', '|S50'),('thres', '|S50'),('shape', '|S50'),('method', '|S50'),('width', '|S50')])  
      
    obs_def['name']  = obs_cat
    obs_def['level'] = obs_lev
    obs_def['thres'] = obs_thr
    
    mod_def['name']  = mod_cat
    mod_def['level'] = mod_lev
    mod_def['thres'] = mod_thr
    mod_def['prob']  = mod_prob
    
    fil_def['name']  = mod_cat
    fil_def['level'] = mod_lev
    fil_def['thres'] = '1.0'
    fil_def['file']  = mod_name

    nei_def['bol']    = 'TRUE'
    nei_def['field']  = 'OBS'
    nei_def['thres']  = '1.0'
    nei_def['shape']  = 'CIRCLE'
    nei_def['method'] = 'MAX'
####################################################################################

    #Calculate MET filter radius in degres from user specified grid resolution and filter value in km
    nei_def['width'] = int(np.ceil(neigh_filter/(grid_delta*111)))*2
    if int(nei_def['width'][0]) % 2 == 0:
        nei_def['width'][0] = str(int(nei_def['width'][0]) - 1)
    
    #Create the content for the CONFIG file
    data2 = 'model = "WRF"; \n' \
        + 'desc = "'+obs_def['name'][0]+'"; \n' \
        + 'obtype = "ANALYS"; \n' \
        + 'regrid = {\n' \
        + '    to_grid    = NONE;\n' \
        + '    vld_thresh = 0.5;\n' \
        + '    method     = NEAREST;\n' \
        + '    width      = 1;\n\n' \
        + 'cat_thresh  = [ NA ];\n' \
        + 'cnt_thresh  = [ NA ];\n' \
        + 'cnt_logic   = UNION;\n' \
        + 'wind_thresh = [ NA ];\n' \
        + 'wind_logic  = UNION;\n' \
        + '}\n\n' \
        + 'fcst = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+mod_def['name'][0]+'";\n' \
        + '      level = [ "'+mod_def['level'][0]+'" ];\n' \
        + '      prob  = '+mod_def['prob'][0]+';\n' \
        + '      cat_thresh = [ '+mod_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'obs = {\n' \
        + '   field = [\n' \
        + '   {\n' \
        + '      name  = "'+obs_def['name'][0]+'";\n' \
        + '      level = [ "'+obs_def['level'][0]+'" ];\n' \
        + '      cat_thresh = [ '+obs_def['thres'][0]+' ];\n' \
        + '   }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'climo_mean = {\n' \
        + '   file_name = [];\n' \
        + '   field     = [];\n' \
        + '   regrid = {\n' \
        + '      method     = NEAREST;\n' \
        + '      width      = 1;\n' \
        + '      vld_thresh = 0.5;\n' \
        + '   }\n' \
        + '   time_interp_method = DW_MEAN;\n' \
        + '   match_day          = FALSE;\n' \
        + '   time_step          = 21600;\n' \
        + '}\n\n' \
        + 'mask = {\n' \
        + '   grid = [ "FULL"];\n' \
        + '   poly = [];\n' \
        + '}\n\n' \
        + 'ci_alpha  = [ 0.05 ];\n' \
        + 'boot = {\n' \
        + '   interval = PCTILE;\n' \
        + '   rep_prop = 1.0;\n' \
        + '   n_rep    = 0;\n' \
        + '   rng      = "mt19937";\n' \
        + '   seed     = "";\n' \
        + '}\n\n' \
        + 'interp = {\n' \
        + '   field      = '+nei_def['field'][0]+';\n' \
        + '   vld_thresh = '+nei_def['thres'][0]+';\n' \
        + '   shape      = '+nei_def['shape'][0]+';\n' \
        + '   type = [\n' \
        + '      {\n' \
        + '         method = '+nei_def['method'][0]+';\n' \
        + '         width  = '+nei_def['width'][0]+';\n' \
        + '      }\n' \
        + '   ];\n' \
        + '}\n\n' \
        + 'nbrhd = {\n' \
        + '   width      = [ 1 ];\n' \
        + '   cov_thresh = [ >=0.5 ];\n' \
        + '   vld_thresh = 1.0;\n' \
        + '}\n\n' \
        + 'output_flag = {\n' \
        + '   fho    = STAT;\n' \
        + '   ctc    = STAT;\n' \
        + '   cts    = STAT;\n' \
        + '   mctc   = STAT;\n' \
        + '   mcts   = STAT;\n' \
        + '   cnt    = STAT;\n' \
        + '   sl1l2  = STAT;\n' \
        + '   sal1l2 = STAT;\n' \
        + '   vl1l2  = STAT;\n' \
        + '   val1l2 = STAT;\n' \
        + '   pct    = STAT;\n' \
        + '   pstd   = STAT;\n' \
        + '   pjc    = STAT;\n' \
        + '   prc    = STAT;\n' \
        + '   nbrctc = STAT;\n' \
        + '   nbrcts = STAT;\n' \
        + '   nbrcnt = STAT;\n' \
        + '}\n\n' \
        + 'nc_pairs_flag   = {\n' \
        + '   latlon     = FALSE;\n' \
        + '   raw        = TRUE;\n' \
        + '   diff       = FALSE;\n' \
        + '   climo      = FALSE;\n' \
        + '   weight     = FALSE;\n' \
        + '   nbrhd      = FALSE;\n' \
        + '   apply_mask = FALSE;\n' \
        + '}\n\n' \
        + 'grid_weight_flag = NONE;\n' \
        + 'rank_corr_flag   = FALSE;\n' \
        + 'tmp_dir          = "/tmp";\n' \
        + 'output_prefix    = "'+obs_def['name'][0]+'_'+mod_name[mod_name.find(mod_cat):mod_name.find('vhr')+5]+'";\n' \
        + 'version          = "V8.1";\n'

    config_name = filedir+'/grid_stat_'+filename+'_OBS'+obs_def['name'][0]+obs_def['level'][0]+'_MOD'+mod_def['name'][0]+mod_def['level'][0]
    f=open(config_name, "w")
    f.write(data2)
    f.close()
    
    return(config_name)
    
####################################################################################
#USING THE OUTPUT FROM GRID_STAT, AGGREGATE ALL STATISTICS FOR OUR ERO VERIFICATION.
#NOTE THAT THIS CODE IS SPECIFIC TO THE CURRENT ERO VERIFICATION PLATFORM, BUT 
#CAN BE CONFIGURED USING THE USER DEFINED VARIABLE SECTION BELOW. MJE. 20170718.
############INPUT FILES FOR set_StatAnalysisConfig CONFIG FILE######################
#filedir       - Directory where CONFIG file is to be saved
#filename      - Prefix for CONFIG file name
#GRIB_PATH_EX  - Directory where all MET data is stored
#mod_cat       - Model Name
#obs_cat       - Observation name
#line_type     - Statistic to analyze from grid_stat output
#datetime_beg  - datetime element for first valid date
#datetime_end  - datetime element for last valid date
#gridpt_filter - total number of grid points within the neighborhood filter
####################OUTPUT FILES FOR set_StatAnalysisConfig#########################
#config_name   - Configuration file name generated by function
####################################################################################

def set_StatAnalysisConfig(filedir,filename,GRIB_PATH_EX,mod_cat,mod_lev,obs_cat,obs_lev,line_type,datetime_beg,datetime_end,gridpt_filter):

##################COMMENT OUT WHEN IN FUNCTION MODE#################################
#    filedir        = '/export/hpc-lw-dtbdev5/merickson/METv6.0/' 
#    filename       = 'FFGonly'
#    mod_cat        = 'ERO_MRGL'
#    mod_lev        = 'Surface'
#    obs_cat        = 'ST4gFFG'
#    obs_lev        = 'A394003'
#    line_type      = 'CTC'
#    datetime_beg   = datetime.datetime(2017,6,18,12,0)
#    datetime_end   = datetime.datetime(2017,6,20,12,0) 
#    gridpt_filter  = 81
####################################################################################

    #Convert datetime elements to yrmondayhr strings
    yrmondayhr_beg=''.join(['{:04d}'.format(datetime_beg.year),'{:02d}'.format(datetime_beg.month), \
        '{:02d}'.format(datetime_beg.day),'{:02d}'.format(datetime_beg.hour)])
    yrmondayhr_end=''.join(['{:04d}'.format(datetime_end.year),'{:02d}'.format(datetime_end.month), \
        '{:02d}'.format(datetime_end.day),'{:02d}'.format(datetime_end.hour)])
    
    #Remove previous job 'filter_job.stat' data
    os.system('rm -rf '+GRIB_PATH_EX+'filter_job.stat')
                  
################USER DEFINED VARIABLES FOR ADDED FLEXABILITY#########################
    stat_def = np.zeros(1, dtype = [('fcst_lev', '|S20'),('obs_lev', '|S20'),('obtype', '|S20'), \
        ('interp_mthd', '|S20'),('interp_pnts', '|S20'),('fcst_thresh', '|S20'), \
        ('obs_thresh', '|S20'), ('jobs', '|S100')])
      
    stat_def['fcst_lev']    = mod_lev
    stat_def['obs_lev']     = obs_lev
    stat_def['obtype']      = 'ANALYS'
    stat_def['interp_mthd'] = 'MAX_CIRCLE'
    stat_def['interp_pnts'] = int(gridpt_filter)
    stat_def['fcst_thresh'] = '>=1.0' 
    stat_def['obs_thresh']  = '>=1.0'
    stat_def['jobs']        = '-job aggregate -dump_row '+GRIB_PATH_EX+'filter_job.stat'
####################################################################################

    data2 = 'model = "WRF"; \n' \
        + 'desc = "'+obs_cat+'"; \n\n' \
        + 'fcst_lead = [];\n' \
        + 'obs_lead  = [];\n' \
        + 'fcst_valid_beg  = "'+yrmondayhr_beg[0:8]+'_'+yrmondayhr_beg[8:10]+'0000"; \n' \
        + 'fcst_valid_end  = "'+yrmondayhr_end[0:8]+'_'+yrmondayhr_end[8:10]+'0000"; \n' \
        + 'fcst_valid_hour = [];\n\n' \
        + 'obs_valid_beg   = "";\n' \
        + 'obs_valid_end   = "";\n' \
        + 'obs_valid_hour  = [];\n\n' \
        + 'fcst_init_beg   = "";\n' \
        + 'fcst_init_end   = "";\n' \
        + 'fcst_init_hour  = [];\n\n' \
        + 'obs_init_beg    = "";\n' \
        + 'obs_init_end    = "";\n' \
        + 'obs_init_hour   = [];\n\n' \
        + 'fcst_var = ["'+mod_cat+'"];\n' \
        + 'obs_var  = ["'+obs_cat+'"];\n\n' \
        + 'fcst_lev = ["'+stat_def['fcst_lev'][0]+'"];\n' \
        + 'obs_lev  = ["'+stat_def['obs_lev'][0]+'"];\n\n' \
        + 'obtype = ["'+stat_def['obtype'][0]+'"];\n\n' \
        + 'vx_mask = ["'+mod_cat+'_'+stat_def['fcst_lev'][0]+stat_def['fcst_thresh'][0]+'"];\n\n' \
        + 'interp_mthd = ["'+stat_def['interp_mthd'][0]+'"];\n\n' \
        + 'interp_pnts = [ '+stat_def['interp_pnts'][0]+' ];\n\n' \
        + 'fcst_thresh = [ '+stat_def['fcst_thresh'][0]+' ];\n' \
        + 'obs_thresh  = [ '+stat_def['obs_thresh'][0]+' ];\n' \
        + 'cov_thresh  = [];\n\n' \
        + 'alpha = [];\n\n' \
        + 'line_type = ["'+line_type+'"];\n\n' \
        + 'column = [];\n\n' \
        + 'weight = [];\n\n' \
        + 'jobs = [\n' \
        + '   "'+stat_def['jobs'][0]+'"\n' \
        + '];\n\n' \
        + 'out_alpha = 0.05;\n\n' \
        + 'boot = {\n' \
        + '   interval = PCTILE;\n' \
        + '   rep_prop = 1.0;\n' \
        + '   n_rep    = 0;\n' \
        + '   rng      = "mt19937";\n' \
        + '   seed     = "";\n' \
        + '}\n\n' \
        + 'rank_corr_flag = FALSE;\n' \
        + 'vif_flag       = FALSE;\n' \
        + 'tmp_dir        = "/tmp";\n' \
        + 'version        = "V8.1";\n'
            
    config_name = filedir+filename+'_STATAnalysis_'+mod_cat+'_Vs_'+obs_cat+'_s'+yrmondayhr_beg+'_e'+yrmondayhr_end+'_'+line_type
    f=open(config_name, "w")
    f.write(data2)
    f.close()
    
    return(config_name)

####################################################################################
#USING THE OUTPUT FROM GRID_STAT, AGGREGATE ALL STATISTICS FOR ERO VERIFICATION.
#NOTE THAT THIS CODE IS DESIGNED TO WORK ON A SINGLE ERO FIELD AS A PROBABILITY, 
#RATHER THAN FEEDING IN EACH BINOMIAL ERO THRESHOLD. THIS WILL LIKELY REPLACE 
#set_StatAnalysisConfig. MJE. 20170718.
#
#Update: Include option to specify interpolation method. MJE. 20190321.
#
############INPUT FILES FOR set_StatAnalysisConfigProb CONFIG FILE######################
#filedir       - Directory where CONFIG file is to be saved
#filename      - Prefix for CONFIG file name
#GRIB_PATH_EX  - Directory where all MET data is stored
#mod_cat       - Model Name
#mod_lev       - Model level
#mod_thr       - Model thresholds
#obs_cat       - Observation name
#obs_lev       - Observation level
#obs_thr       - Observation thresholds
#line_type     - Statistic to analyze from grid_stat output
#datetime_beg  - datetime element for first valid date
#datetime_end  - datetime element for last valid date
#gridpt_filter - total number of grid points within the neighborhood filter
#interp_mthd   - specify interpolation method
####################OUTPUT FILES FOR set_StatAnalysisConfig#########################
#config_name   - Configuration file name generated by function
####################################################################################

def set_StatAnalysisConfigProb(filedir,filename,GRIB_PATH_EX,mod_cat,mod_lev,mod_thr,obs_cat,obs_lev,obs_thr,line_type,datetime_beg,datetime_end,gridpt_filter,interp_mthd):

##################COMMENT OUT WHEN IN FUNCTION MODE#################################
#    filedir        = '/export/hpc-lw-dtbdev5/merickson/METv6.0/' 
#    filename       = 'FFGonly'
#    mod_cat        = 'ERO_MRGL'
#    mod_lev        = 'Surface'
#    mod_thr        = '>=0.0, >=0.05, >=0.1, >=0.2, >=0.5, >=1.0'
#    obs_cat        = 'ST4gFFG'
#    obs_lev        = 'A394003'
#    obs_thr        = '>0.0'
#    line_type      = 'CTC'
#    datetime_beg   = datetime.datetime(2017,6,18,12,0)
#    datetime_end   = datetime.datetime(2017,6,20,12,0) 
#    gridpt_filter  = 81
#    interp_mthd    = 'MAX_CIRCLE'
####################################################################################

    #Convert datetime elements to yrmondayhr strings
    yrmondayhr_beg=''.join(['{:04d}'.format(datetime_beg.year),'{:02d}'.format(datetime_beg.month), \
        '{:02d}'.format(datetime_beg.day),'{:02d}'.format(datetime_beg.hour)])
    yrmondayhr_end=''.join(['{:04d}'.format(datetime_end.year),'{:02d}'.format(datetime_end.month), \
        '{:02d}'.format(datetime_end.day),'{:02d}'.format(datetime_end.hour)])
    
    #Remove previous job 'filter_job.stat' data
    os.system('rm -rf '+GRIB_PATH_EX+'filter_job.stat')
                  
################USER DEFINED VARIABLES FOR ADDED FLEXABILITY#########################
    stat_def = np.zeros(1, dtype = [('fcst_lev', '|S50'),('obs_lev', '|S50'),('obtype', '|S50'), \
        ('interp_mthd', '|S50'),('interp_pnts', '|S50'),('fcst_thresh', '|S50'), \
        ('obs_thresh', '|S50'), ('jobs', '|S100')])
     
    stat_def['fcst_lev']    = mod_lev
    stat_def['obs_lev']     = obs_lev
    stat_def['obtype']      = 'ANALYS'
    stat_def['interp_mthd'] = interp_mthd
    stat_def['interp_pnts'] = int(gridpt_filter)
    stat_def['fcst_thresh'] = mod_thr 
    stat_def['obs_thresh']  = obs_thr
    stat_def['jobs']        = '-job aggregate -dump_row '+GRIB_PATH_EX+'filter_job.stat'
####################################################################################
    if obs_lev == ' ':
        data2 = 'model = "WRF"; \n' \
            + 'desc = "'+obs_cat+'"; \n\n' \
            + 'fcst_lead = [];\n' \
            + 'obs_lead  = [];\n' \
            + 'fcst_valid_beg  = "'+yrmondayhr_beg[0:8]+'_'+yrmondayhr_beg[8:10]+'0000"; \n' \
            + 'fcst_valid_end  = "'+yrmondayhr_end[0:8]+'_'+yrmondayhr_end[8:10]+'0000"; \n' \
            + 'fcst_valid_hour = [];\n\n' \
            + 'obs_valid_beg   = "";\n' \
            + 'obs_valid_end   = "";\n' \
            + 'obs_valid_hour  = [];\n\n' \
            + 'fcst_init_beg   = "";\n' \
            + 'fcst_init_end   = "";\n' \
            + 'fcst_init_hour  = [];\n\n' \
            + 'obs_init_beg    = "";\n' \
            + 'obs_init_end    = "";\n' \
            + 'obs_init_hour   = [];\n\n' \
            + 'fcst_var = ["'+mod_cat+'"];\n' \
            + 'obs_var  = ["'+obs_cat+'"];\n\n' \
            + 'fcst_lev = ["'+stat_def['fcst_lev'][0]+'"];\n' \
            + 'obs_lev  = ['+stat_def['obs_lev'][0]+'];\n\n' \
            + 'obtype = ["'+stat_def['obtype'][0]+'"];\n\n' \
            + 'vx_mask = [];\n\n' \
            + 'interp_mthd = ["'+stat_def['interp_mthd'][0]+'"];\n\n' \
            + 'interp_pnts = [ '+stat_def['interp_pnts'][0]+' ];\n\n' \
            + 'fcst_thresh = [ '+stat_def['fcst_thresh'][0]+' ];\n' \
            + 'obs_thresh  = [ '+stat_def['obs_thresh'][0]+' ];\n' \
            + 'cov_thresh  = [];\n\n' \
            + 'alpha = [];\n\n' \
            + 'line_type = ["'+line_type+'"];\n\n' \
            + 'column = [];\n\n' \
            + 'weight = [];\n\n' \
            + 'jobs = [\n' \
            + '   "'+stat_def['jobs'][0]+'"\n' \
            + '];\n\n' \
            + 'out_alpha = 0.05;\n\n' \
            + 'boot = {\n' \
            + '   interval = PCTILE;\n' \
            + '   rep_prop = 1.0;\n' \
            + '   n_rep    = 0;\n' \
            + '   rng      = "mt19937";\n' \
            + '   seed     = "";\n' \
            + '}\n\n' \
            + 'rank_corr_flag = FALSE;\n' \
            + 'vif_flag       = FALSE;\n' \
            + 'tmp_dir        = "/tmp";\n' \
            + 'version        = "V8.1";\n'
    else:
        data2 = 'model = "WRF"; \n' \
            + 'desc = "'+obs_cat+'"; \n\n' \
            + 'fcst_lead = [];\n' \
            + 'obs_lead  = [];\n' \
            + 'fcst_valid_beg  = "'+yrmondayhr_beg[0:8]+'_'+yrmondayhr_beg[8:10]+'0000"; \n' \
            + 'fcst_valid_end  = "'+yrmondayhr_end[0:8]+'_'+yrmondayhr_end[8:10]+'0000"; \n' \
            + 'fcst_valid_hour = [];\n\n' \
            + 'obs_valid_beg   = "";\n' \
            + 'obs_valid_end   = "";\n' \
            + 'obs_valid_hour  = [];\n\n' \
            + 'fcst_init_beg   = "";\n' \
            + 'fcst_init_end   = "";\n' \
            + 'fcst_init_hour  = [];\n\n' \
            + 'obs_init_beg    = "";\n' \
            + 'obs_init_end    = "";\n' \
            + 'obs_init_hour   = [];\n\n' \
            + 'fcst_var = ["'+mod_cat+'"];\n' \
            + 'obs_var  = ["'+obs_cat+'"];\n\n' \
            + 'fcst_lev = ["'+stat_def['fcst_lev'][0]+'"];\n' \
            + 'obs_lev  = ["'+stat_def['obs_lev'][0]+'"];\n\n' \
            + 'obtype = ["'+stat_def['obtype'][0]+'"];\n\n' \
            + 'vx_mask = [];\n\n' \
            + 'interp_mthd = ["'+stat_def['interp_mthd'][0]+'"];\n\n' \
            + 'interp_pnts = [ '+stat_def['interp_pnts'][0]+' ];\n\n' \
            + 'fcst_thresh = [ '+stat_def['fcst_thresh'][0]+' ];\n' \
            + 'obs_thresh  = [ '+stat_def['obs_thresh'][0]+' ];\n' \
            + 'cov_thresh  = [];\n\n' \
            + 'alpha = [];\n\n' \
            + 'line_type = ["'+line_type+'"];\n\n' \
            + 'column = [];\n\n' \
            + 'weight = [];\n\n' \
            + 'jobs = [\n' \
            + '   "'+stat_def['jobs'][0]+'"\n' \
            + '];\n\n' \
            + 'out_alpha = 0.05;\n\n' \
            + 'boot = {\n' \
            + '   interval = PCTILE;\n' \
            + '   rep_prop = 1.0;\n' \
            + '   n_rep    = 0;\n' \
            + '   rng      = "mt19937";\n' \
            + '   seed     = "";\n' \
            + '}\n\n' \
            + 'rank_corr_flag = FALSE;\n' \
            + 'vif_flag       = FALSE;\n' \
            + 'tmp_dir        = "/tmp";\n' \
            + 'version        = "V8.1";\n'
               
    config_name = filedir+filename+'_STATAnalysis_'+mod_cat+'_Vs_'+obs_cat+'_s'+yrmondayhr_beg+'_e'+yrmondayhr_end+'_'+line_type
    f=open(config_name, "w")
    f.write(data2)
    f.close()
    
    return(config_name)
    
############THIS FUNCTION CREATES THE MODE CONFIG FILE###########################################
#filedir               - Directory where CONFIG file is to be saved
#filename              - Prefix for CONFIG file name
#raw_thres             - Threshold before smoothing is applied
#conv_radius           - Number of grid points over which to convolve (smooth) data
#area_thres            - Minimum size to keep object (in grid points) 
#pre_acc               - Precipitation accumulation interval (hours)
#total_fcst_hrs        - Total length of forecast hours considered
#total_interest_thresh - Total interest threshold for determining matches
#################################################################################################

def set_MODEConfig(filedir,filename,raw_thres,conv_radius,area_thres,pre_acc,total_fcst_hrs,total_interest_thresh):

   #Convert pre. acc. variable to a string
   pre_acc_str1 = '{:02d}'.format(int(pre_acc))
   pre_acc_str2 = '{:01d}'.format(int(pre_acc))
   
   #Create the content for the CONFIG file
   data2 = 'model = "WRF"; \n' \
       + 'desc = "NA"; \n' \
       + 'obtype = "ST4"; \n' \
       + 'regrid = {\n' \
       + '    to_grid    = NONE;\n' \
       + '    vld_thresh = 0.5;\n' \
       + '    method     = NEAREST;\n' \
       + '    width      = 1;\n' \
       + '}\n\n' \
       + 'grid_res = 4;\n\n' \
       + 'quilt = FALSE;\n' \
       + 'fcst = {\n' \
       + '   field = {\n' \
       + '      name  = "APCP_'+pre_acc_str1+'_A'+pre_acc_str2+'";\n' \
       + '      level = "(*,*)";\n' \
       + '   }\n\n' \
       + '   raw_thresh        = >'+str(float(raw_thres*25.4)/2)+';   // raw threshold value to keep data\n' \
       + '   conv_radius       = '+str(conv_radius)+';               // radius of smoothing in grid squares\n' \
       + '   conv_thresh       = >='+str(float(raw_thres)*25.4)+'; // threshold value after smoothing\n' \
       + '   vld_thresh        = 0.5;                                // ratio of bad data to total data to keep smoothing in convolution area\n' \
       + '   area_thresh       = >='+str(area_thres)+';              // area threshold to keep object, total count in grid squares\n' \
       + '   inten_perc_value  = 100;                             // intensity value associated with each object (100 = max value)\n' \
       + '   inten_perc_thresh = >=0.0;                           // retain object based on value from ''inten_perc_value''\n' \
       + '   merge_thresh      = >='+str(float(raw_thres*25.4)/2)+'; // threshold value to define larger objects for merging\n' \
       + '   merge_flag        = THRESH;\n' \
       + '}\n\n' \
       + 'obs = {\n' \
       + '   field = {\n' \
       + '      name  = "APCP_'+pre_acc_str1+'_A'+pre_acc_str2+'";\n' \
       + '      level = "(*,*)";\n' \
       + '   };\n' \
       + '\n' \
       + '   raw_thresh        = >'+str(float(raw_thres*25.4)/2)+'; // raw threshold value to keep data\n' \
       + '   conv_radius       = '+str(int(float(conv_radius)))+';   // radius of smoothing in grid squares\n' \
       + '   conv_thresh       = >='+str((float(raw_thres)*25.4))+'; // threshold value after smoothing\n' \
       + '   vld_thresh        = 0.5;                                // ratio of bad data to total data to keep smoothing in convolution area\n' \
       + '   area_thresh       = >='+str(area_thres)+';              // area threshold to keep object, total count in grid squares\n' \
       + '   inten_perc_value  = 100;                             // intensity value associated with each object (100 = max value)\n' \
       + '   inten_perc_thresh = >=0.0;                           // retain object based on value from ''inten_perc_value''\n' \
       + '   merge_thresh      = >='+str(float(raw_thres*25.4)/2)+'; // threshold value to define larger objects for merging\n' \
       + '   merge_flag        = THRESH;\n' \
       + '}\n\n' \
       + 'mask_missing_flag = BOTH;\n' \
       + 'match_flag = MERGE_FCST;\n' \
       + 'max_centroid_dist = 600.0/grid_res;\n'\
       + 'mask = {\n' \
       + '   grid      = "";\n'\
       + '   grid_flag = NONE; // Apply to NONE, FCST, OBS, or BOTH\n' \
       + '   poly      = "/export/hpc-lw-dtbdev5/merickson/METv5.1/CONUS_BROAD.poly";\n' \
       + '   poly_flag = NONE; // Apply to NONE, FCST, OBS, or BOTH\n' \
       + '}\n\n' \
       + 'weight = {\n' \
       + '   centroid_dist    = 2.0;\n' \
       + '   boundary_dist    = 4.0;\n' \
       + '   convex_hull_dist = 0.0;\n' \
       + '   angle_diff       = 1.0;\n' \
       + '   area_ratio       = 1.0;\n' \
       + '   int_area_ratio   = 2.0;\n' \
       + '   complexity_ratio = 0.0;\n' \
       + '   inten_perc_ratio = 0.0;\n' \
       + '   inten_perc_value = 50;\n' \
       + '}\n\n' \
       + 'interest_function = {\n' \
       + '   centroid_dist = (\n' \
       + '      (            0.0, 1.0 )\n' \
       + '      (  60.0/grid_res, 1.0 )\n' \
       + '      ( 600.0/grid_res, 0.0 )\n' \
       + '   );\n' \
       + '   boundary_dist = (\n' \
       + '      (            0.0, 1.0 )\n' \
       + '      ( 400.0/grid_res, 0.0 )\n' \
       + '   );\n' \
       + '   convex_hull_dist = (\n' \
       + '      (            0.0, 1.0 )\n' \
       + '      ( 400.0/grid_res, 0.0 )\n' \
       + '   );\n' \
       + '   angle_diff = (\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      ( 30.0, 1.0 )\n' \
       + '      ( 90.0, 0.0 )\n' \
       + '   );\n' \
       + '   corner   = 0.8;\n' \
       + '   ratio_if = (\n' \
       + '      (    0.0, 0.0 )\n' \
       + '      ( corner, 1.0 )\n' \
       + '      (    1.0, 1.0 )\n' \
       + '   );\n' \
       + '   area_ratio = ratio_if;\n' \
       + '   int_area_ratio = (\n' \
       + '      ( 0.00, 0.00 )\n' \
       + '      ( 0.10, 0.50 )\n' \
       + '      ( 0.25, 1.00 )\n' \
       + '      ( 1.00, 1.00 )\n' \
       + '   );\n' \
       + '   complexity_ratio = ratio_if;\n' \
       + '   inten_perc_ratio = ratio_if;\n' \
       + '}\n\n' \
       + 'total_interest_thresh = '+str(total_interest_thresh)+';\n' \
       + 'print_interest_thresh = 0.7;\n' \
       + 'met_data_dir = "MET_BASE";\n' \
       + 'fcst_raw_plot = {\n' \
       + '   color_table      = "MET_BASE/colortables/met_default.ctable";\n' \
       + '   plot_min         = 0.0;\n' \
       + '   plot_max         = 0.0;\n' \
       + '   colorbar_spacing = 1;\n' \
       + '}\n\n' \
       + 'obs_raw_plot = {\n' \
       + '   color_table      = "MET_BASE/colortables/met_default.ctable";\n' \
       + '   plot_min         = 0.0;\n' \
       + '   plot_max         = 0.0;\n' \
       + '   colorbar_spacing = 1;\n' \
       + '}\n\n' \
       + 'object_plot = {\n' \
       + '   color_table      = "MET_BASE/colortables/mode_obj.ctable";\n' \
       + '}\n\n' \
       + 'zero_border_size = 1;\n' \
       + 'plot_valid_flag = FALSE;\n' \
       + 'plot_gcarc_flag = FALSE;\n' \
       + 'ps_plot_flag    = TRUE;\n' \
       + 'nc_pairs_flag   = {\n' \
       + '   latlon       = TRUE;\n' \
       + '   raw          = TRUE;\n' \
       + '   object_raw   = TRUE;\n' \
       + '   object_id    = TRUE;\n' \
       + '   cluster_id   = TRUE;\n' \
       + '   polylines    = TRUE;\n' \
       + '}\n\n' \
       + 'ct_stats_flag   = TRUE;\n' \
       + 'shift_right = 0;\n' \
       + 'output_prefix  = "";\n' \
       + 'version        = "V8.1";\n'

   f=open(filedir+'/'+filename+'_f'+str(int(total_fcst_hrs))+'_p'+str(int(pre_acc))+'_t'+str(raw_thres), "w")
   f.write(data2)
   f.close()

############THIS FUNCTION CREATES THE MTD CONFIG FILE############################################
#filedir               - Directory where CONFIG file is to be saved
#filename              - Prefix for CONFIG file name
#raw_thres             - Threshold before smoothing is applied
#conv_radius           - Number of grid points over which to convolve (smooth) data
#min_volume            - Minimum 3D size to keep object (in grid points) 
#total_fcst_hrs        - Total length of forecast hours considered
#total_interest_thresh - Total interest threshold for determining matches
#acc_str               - String used as input to MTD
#################################################################################################

def set_MTDConfig(filedir,filename,raw_thres,conv_radius,min_volume,total_fcst_hrs,total_interest_thresh,acc_str):

   #Create the content for the CONFIG file
   data2 = 'model = "WRF"; \n' \
       + 'desc = "NA";\n' \
       + 'obtype = "ANALYS"; \n' \
       + 'regrid = {\n' \
       + '    to_grid    = NONE;\n' \
       + '    vld_thresh = 0.5;\n' \
       + '    method     = NEAREST;\n' \
       + '    width      = 1;\n' \
       + '}\n\n' \
       + 'grid_res = 4;\n\n' \
       + 'fcst = {\n' \
       + '   field = {\n' \
       + '      name  = "'+acc_str+'";\n' \
       + '      level = "(*,*)";\n' \
       + '   }\n\n' \
       + '   conv_radius       = '+str(conv_radius)+'; // in grid squares\n' \
       + '   conv_thresh       = >='+str(float(raw_thres)*25.4)+';\n' \
       + '}\n\n' \
       + 'obs = fcst;\n' \
       + 'min_volume = '+str(int(min_volume))+';\n' \
       + 'weight = {\n' \
       + '   space_centroid_dist  = 6.0;\n' \
       + '   time_centroid_delta  = 2.0;\n' \
       + '   speed_delta          = 0.0;\n' \
       + '   direction_diff       = 2.0;\n' \
       + '   volume_ratio         = 1.0;\n' \
       + '   axis_angle_diff      = 0.0;\n' \
       + '   start_time_delta     = 3.0;\n' \
       + '   end_time_delta       = 1.0;\n' \
       + '}\n\n' \
       + 'interest_function = {\n' \
       + '   space_centroid_dist = (\n' \
       + '      (   0.0, 1.0 )\n' \
       + '      ( 100.0, 0.5 )\n' \
       + '      ( 200.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   time_centroid_delta = (\n' \
       + '      ( -5.0, 0.0 )\n' \
       + '      ( -3.0, 0.5 )\n' \
       + '      ( -1.0, 0.8 )\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      (  1.0, 0.8 )\n' \
       + '      (  3.0, 0.5 )\n' \
       + '      (  5.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   speed_delta = (\n' \
       + '      ( -10.0, 0.0 )\n' \
       + '      (  -5.0, 0.5 )\n' \
       + '      (   0.0, 1.0 )\n' \
       + '      (   5.0, 0.5 )\n' \
       + '      (  10.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   direction_diff = (\n' \
       + '      (   0.0, 1.0 )\n' \
       + '      (  90.0, 0.0 )\n' \
       + '      ( 180.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   volume_ratio = (\n' \
       + '      (  0.0, 0.0 )\n' \
       + '      (  0.5, 0.5 )\n' \
       + '      (  1.0, 1.0 )\n' \
       + '      (  1.5, 0.5 )\n' \
       + '      (  2.0, 0.0 )\n' \
       + '   );\n' \
       + '   axis_angle_diff = (\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      ( 30.0, 1.0 )\n' \
       + '      ( 90.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   start_time_delta = (\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      (  3.0, 0.5 )\n' \
       + '      (  5.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   end_time_delta = (\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      (  3.0, 0.5 )\n' \
       + '      (  5.0, 0.0 )\n' \
       + '   );\n\n' \
       + '}\n\n' \
       + 'total_interest_thresh = '+str(total_interest_thresh)+';\n\n' \
       + 'nc_output = {\n' \
       + '   latlon       = true;\n' \
       + '   raw          = true;\n' \
       + '   object_id    = true;\n' \
       + '   cluster_id   = true;\n' \
       + '}\n\n' \
       + 'txt_output = {\n' \
       + '   attributes_2d   = true;\n' \
       + '   attributes_3d   = true;\n' \
       + '}\n\n' \
       + 'output_prefix  = "";\n\n' \
       + 'version        = "V8.1";\n\n'
       
   f=open(filedir+'/'+filename+'_f'+str(int(total_fcst_hrs))+'_p'+acc_str+'_t'+str(raw_thres), "w")
   f.write(data2)
   f.close()
   
   return(filedir+'/'+filename+'_f'+str(int(total_fcst_hrs))+'_p'+acc_str+'_t'+str(raw_thres))
      
############THIS FUNCTION CREATES THE MTD CONFIG FILE FOR NEWSE############################################
#filedir               - Directory where CONFIG file is to be saved
#filename              - Prefix for CONFIG file name
#raw_thres             - Threshold before smoothing is applied
#conv_radius           - Number of grid points over which to convolve (smooth) data
#min_volume            - Minimum 3D size to keep object (in grid points) 
#total_fcst_hrs        - Total length of forecast hours considered
#total_interest_thresh - Total interest threshold for determining matches
#acc_str               - String used as input to MTD
#################################################################################################
#Update: Configured to optimal setting based on sensitivity runs. MJE. 20191231

def set_MTDConfig_NEWSe(filedir,filename,raw_thres,conv_radius,min_volume,total_fcst_hrs,total_interest_thresh,acc_str):

   #Create the content for the CONFIG file
   data2 = 'model = "WRF"; \n' \
       + 'desc = "NA";\n' \
       + 'obtype = "ANALYS"; \n' \
       + 'regrid = {\n' \
       + '    to_grid    = NONE;\n' \
       + '    vld_thresh = 0.5;\n' \
       + '    method     = NEAREST;\n' \
       + '    width      = 1;\n' \
       + '}\n\n' \
       + 'grid_res = 4;\n\n' \
       + 'fcst = {\n' \
       + '   field = {\n' \
       + '      name  = "'+acc_str+'";\n' \
       + '      level = "(*,*)";\n' \
       + '   }\n\n' \
       + '   conv_radius       = '+str(conv_radius)+'; // in grid squares\n' \
       + '   conv_thresh       = >='+str(float(raw_thres)*25.4)+';\n' \
       + '}\n\n' \
       + 'obs = fcst;\n' \
       + 'min_volume = '+str(int(min_volume))+';\n' \
       + 'weight = {\n' \
       + '   space_centroid_dist  = 12.0;\n' \
       + '   time_centroid_delta  = 2.0;\n' \
       + '   speed_delta          = 0.0;\n' \
       + '   direction_diff       = 0.0;\n' \
       + '   volume_ratio         = 1.0;\n' \
       + '   axis_angle_diff      = 0.0;\n' \
       + '   start_time_delta     = 3.0;\n' \
       + '   end_time_delta       = 1.0;\n' \
       + '}\n\n' \
       + 'interest_function = {\n' \
       + '   space_centroid_dist = (\n' \
       + '      (   0.0, 1.0 )\n' \
       + '      (  50.0, 0.5 )\n' \
       + '      ( 150.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   time_centroid_delta = (\n' \
       + '      ( -5.0, 0.0 )\n' \
       + '      ( -3.0, 0.5 )\n' \
       + '      ( -1.0, 0.8 )\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      (  1.0, 0.8 )\n' \
       + '      (  3.0, 0.5 )\n' \
       + '      (  5.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   speed_delta = (\n' \
       + '      ( -10.0, 0.0 )\n' \
       + '      (  -5.0, 0.5 )\n' \
       + '      (   0.0, 1.0 )\n' \
       + '      (   5.0, 0.5 )\n' \
       + '      (  10.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   direction_diff = (\n' \
       + '      (   0.0, 1.0 )\n' \
       + '      (  90.0, 0.0 )\n' \
       + '      ( 180.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   volume_ratio = (\n' \
       + '      (  0.0, 0.0 )\n' \
       + '      (  0.5, 0.5 )\n' \
       + '      (  1.0, 1.0 )\n' \
       + '      (  1.5, 0.5 )\n' \
       + '      (  2.0, 0.0 )\n' \
       + '   );\n' \
       + '   axis_angle_diff = (\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      ( 30.0, 1.0 )\n' \
       + '      ( 90.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   start_time_delta = (\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      (  3.0, 0.5 )\n' \
       + '      (  5.0, 0.0 )\n' \
       + '   );\n\n' \
       + '   end_time_delta = (\n' \
       + '      (  0.0, 1.0 )\n' \
       + '      (  3.0, 0.5 )\n' \
       + '      (  5.0, 0.0 )\n' \
       + '   );\n\n' \
       + '}\n\n' \
       + 'total_interest_thresh = '+str(total_interest_thresh)+';\n\n' \
       + 'nc_output = {\n' \
       + '   latlon       = true;\n' \
       + '   raw          = true;\n' \
       + '   object_id    = true;\n' \
       + '   cluster_id   = true;\n' \
       + '}\n\n' \
       + 'txt_output = {\n' \
       + '   attributes_2d   = true;\n' \
       + '   attributes_3d   = true;\n' \
       + '}\n\n' \
       + 'output_prefix  = "";\n\n' \
       + 'version        = "V8.1";\n\n'
       
   f=open(filedir+'/'+filename+'_f'+str(int(total_fcst_hrs))+'_p'+acc_str+'_t'+str(raw_thres), "w")
   f.write(data2)
   f.close()
   
   return(filedir+'/'+filename+'_f'+str(int(total_fcst_hrs))+'_p'+acc_str+'_t'+str(raw_thres))

